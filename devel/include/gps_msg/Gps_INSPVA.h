// Generated by gencpp from file gps_msg/Gps_INSPVA.msg
// DO NOT EDIT!


#ifndef GPS_MSG_MESSAGE_GPS_INSPVA_H
#define GPS_MSG_MESSAGE_GPS_INSPVA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace gps_msg
{
template <class ContainerAllocator>
struct Gps_INSPVA_
{
  typedef Gps_INSPVA_<ContainerAllocator> Type;

  Gps_INSPVA_()
    : header()
    , week_gnss(0)
    , seconds(0.0)
    , lat(0.0)
    , lon(0.0)
    , height(0.0)
    , north_velocity(0.0)
    , east_velocity(0.0)
    , up_velocity(0.0)
    , roll(0.0)
    , pitch(0.0)
    , azimuth(0.0)
    , status()  {
    }
  Gps_INSPVA_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , week_gnss(0)
    , seconds(0.0)
    , lat(0.0)
    , lon(0.0)
    , height(0.0)
    , north_velocity(0.0)
    , east_velocity(0.0)
    , up_velocity(0.0)
    , roll(0.0)
    , pitch(0.0)
    , azimuth(0.0)
    , status(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _week_gnss_type;
  _week_gnss_type week_gnss;

   typedef double _seconds_type;
  _seconds_type seconds;

   typedef double _lat_type;
  _lat_type lat;

   typedef double _lon_type;
  _lon_type lon;

   typedef double _height_type;
  _height_type height;

   typedef double _north_velocity_type;
  _north_velocity_type north_velocity;

   typedef double _east_velocity_type;
  _east_velocity_type east_velocity;

   typedef double _up_velocity_type;
  _up_velocity_type up_velocity;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _azimuth_type;
  _azimuth_type azimuth;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::gps_msg::Gps_INSPVA_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_msg::Gps_INSPVA_<ContainerAllocator> const> ConstPtr;

}; // struct Gps_INSPVA_

typedef ::gps_msg::Gps_INSPVA_<std::allocator<void> > Gps_INSPVA;

typedef boost::shared_ptr< ::gps_msg::Gps_INSPVA > Gps_INSPVAPtr;
typedef boost::shared_ptr< ::gps_msg::Gps_INSPVA const> Gps_INSPVAConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gps_msg::Gps_INSPVA_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gps_msg::Gps_INSPVA_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gps_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'gps_msg': ['/home/dyc/Documents/catkin_ws/src/gps_msg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gps_msg::Gps_INSPVA_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gps_msg::Gps_INSPVA_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gps_msg::Gps_INSPVA_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gps_msg::Gps_INSPVA_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps_msg::Gps_INSPVA_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps_msg::Gps_INSPVA_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gps_msg::Gps_INSPVA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6290ba6a27afe14d9f29923256059f31";
  }

  static const char* value(const ::gps_msg::Gps_INSPVA_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6290ba6a27afe14dULL;
  static const uint64_t static_value2 = 0x9f29923256059f31ULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_msg::Gps_INSPVA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gps_msg/Gps_INSPVA";
  }

  static const char* value(const ::gps_msg::Gps_INSPVA_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gps_msg::Gps_INSPVA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
\n\
uint32 week_gnss     # GNSS周\n\
float64 seconds      # 周秒\n\
float64 lat          # 纬度(WGS84) degree  \n\
float64 lon          # 经度(WGS84) degree\n\
float64 height       # 椭球高(WGS84) m \n\
float64 north_velocity   # 北向速度（负值为南向）m/s\n\
float64 east_velocity    # 东向速度（负值为西向）m/s\n\
float64 up_velocity      # 天向速度m/s\n\
float64 roll             # 横滚角（沿y轴右手螺旋）\n\
float64 pitch            # 俯仰角（沿x轴右手螺旋）\n\
float64 azimuth          # 航向角，从北向顺时针方向为正（绕z轴左手螺旋）\n\
                        # 这是IMU陀螺仪组合滤波计算出的惯性方位角\n\
string status   # 如下\n\
\n\
# 0 INS_INACTIVE    IMU数据已存储,但未开始对准; INS 不解算\n\
# 1 INS_ALIGNING    INS对准模式\n\
        \n\
# 2 INS_HIGH_VARIANCE   INS已进入导航模式,但航向角误差超限.对于大多 \n\
#                       数IMU,默认阈值是 2 度。INS 解仍然有效,但是\n\
#                       您应监视在 INSSTDEV 日志中的解的不确定性。当\n\
#                       GNSS 用于帮助 INS 时,您可能会遇到这种状态\n\
\n\
# 3 INS_SOLUTION_GOOD   进入导航模式且 INS 解正常\n\
\n\
# 4 INS_SOLUTION_FREE   INS滤波器处于导航模式,GNSS 解被怀疑是错\n\
#                       误的。这可能是由于多径或有限的卫星能见度。\n\
#                       组合滤波器已拒绝 GNSS 位置,并等待其质量\n\
#                       提高\n\
\n\
#5 INS_ALIGNMENT_COMPLETE   INS滤波器处于导航模式,但还没有足够的车辆动\n\
#                           态使其满足指标要求。\n\
\n\
#6 DETERMINING_ORIENTATION  INS正在利用重力确定IMU轴向\n\
\n\
#7 WAITING_INITIALPOS   INS滤波器确定IMU方向,并等待初始位置估计开\n\
#                       始对准过程\n\
\n\
#8 WAITING_AZIMUTH      INS滤波器具有方向、初始偏置、初始位置和有效\n\
#                       横滚、俯仰估计。直到输入初始方位才开始进一步\n\
#                       工作\n\
\n\
#9 INITIALIZING_BIASES  INS滤波器估计在静态数据的前 10 秒内的初始偏置\n\
#10 MOTION_DETECT       INS滤波器没有完全对准,但已经检测到运动\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::gps_msg::Gps_INSPVA_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gps_msg::Gps_INSPVA_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.week_gnss);
      stream.next(m.seconds);
      stream.next(m.lat);
      stream.next(m.lon);
      stream.next(m.height);
      stream.next(m.north_velocity);
      stream.next(m.east_velocity);
      stream.next(m.up_velocity);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.azimuth);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gps_INSPVA_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gps_msg::Gps_INSPVA_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gps_msg::Gps_INSPVA_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "week_gnss: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.week_gnss);
    s << indent << "seconds: ";
    Printer<double>::stream(s, indent + "  ", v.seconds);
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "lon: ";
    Printer<double>::stream(s, indent + "  ", v.lon);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "north_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.north_velocity);
    s << indent << "east_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.east_velocity);
    s << indent << "up_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.up_velocity);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "azimuth: ";
    Printer<double>::stream(s, indent + "  ", v.azimuth);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPS_MSG_MESSAGE_GPS_INSPVA_H
