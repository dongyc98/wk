# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gps_msg/Gps_INSPVA.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Gps_INSPVA(genpy.Message):
  _md5sum = "6290ba6a27afe14d9f29923256059f31"
  _type = "gps_msg/Gps_INSPVA"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

uint32 week_gnss     # GNSS周
float64 seconds      # 周秒
float64 lat          # 纬度(WGS84) degree  
float64 lon          # 经度(WGS84) degree
float64 height       # 椭球高(WGS84) m 
float64 north_velocity   # 北向速度（负值为南向）m/s
float64 east_velocity    # 东向速度（负值为西向）m/s
float64 up_velocity      # 天向速度m/s
float64 roll             # 横滚角（沿y轴右手螺旋）
float64 pitch            # 俯仰角（沿x轴右手螺旋）
float64 azimuth          # 航向角，从北向顺时针方向为正（绕z轴左手螺旋）
                        # 这是IMU陀螺仪组合滤波计算出的惯性方位角
string status   # 如下

# 0 INS_INACTIVE    IMU数据已存储,但未开始对准; INS 不解算
# 1 INS_ALIGNING    INS对准模式
        
# 2 INS_HIGH_VARIANCE   INS已进入导航模式,但航向角误差超限.对于大多 
#                       数IMU,默认阈值是 2 度。INS 解仍然有效,但是
#                       您应监视在 INSSTDEV 日志中的解的不确定性。当
#                       GNSS 用于帮助 INS 时,您可能会遇到这种状态

# 3 INS_SOLUTION_GOOD   进入导航模式且 INS 解正常

# 4 INS_SOLUTION_FREE   INS滤波器处于导航模式,GNSS 解被怀疑是错
#                       误的。这可能是由于多径或有限的卫星能见度。
#                       组合滤波器已拒绝 GNSS 位置,并等待其质量
#                       提高

#5 INS_ALIGNMENT_COMPLETE   INS滤波器处于导航模式,但还没有足够的车辆动
#                           态使其满足指标要求。

#6 DETERMINING_ORIENTATION  INS正在利用重力确定IMU轴向

#7 WAITING_INITIALPOS   INS滤波器确定IMU方向,并等待初始位置估计开
#                       始对准过程

#8 WAITING_AZIMUTH      INS滤波器具有方向、初始偏置、初始位置和有效
#                       横滚、俯仰估计。直到输入初始方位才开始进一步
#                       工作

#9 INITIALIZING_BIASES  INS滤波器估计在静态数据的前 10 秒内的初始偏置
#10 MOTION_DETECT       INS滤波器没有完全对准,但已经检测到运动


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','week_gnss','seconds','lat','lon','height','north_velocity','east_velocity','up_velocity','roll','pitch','azimuth','status']
  _slot_types = ['std_msgs/Header','uint32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,week_gnss,seconds,lat,lon,height,north_velocity,east_velocity,up_velocity,roll,pitch,azimuth,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Gps_INSPVA, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.week_gnss is None:
        self.week_gnss = 0
      if self.seconds is None:
        self.seconds = 0.
      if self.lat is None:
        self.lat = 0.
      if self.lon is None:
        self.lon = 0.
      if self.height is None:
        self.height = 0.
      if self.north_velocity is None:
        self.north_velocity = 0.
      if self.east_velocity is None:
        self.east_velocity = 0.
      if self.up_velocity is None:
        self.up_velocity = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.azimuth is None:
        self.azimuth = 0.
      if self.status is None:
        self.status = ''
    else:
      self.header = std_msgs.msg.Header()
      self.week_gnss = 0
      self.seconds = 0.
      self.lat = 0.
      self.lon = 0.
      self.height = 0.
      self.north_velocity = 0.
      self.east_velocity = 0.
      self.up_velocity = 0.
      self.roll = 0.
      self.pitch = 0.
      self.azimuth = 0.
      self.status = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I10d().pack(_x.week_gnss, _x.seconds, _x.lat, _x.lon, _x.height, _x.north_velocity, _x.east_velocity, _x.up_velocity, _x.roll, _x.pitch, _x.azimuth))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 84
      (_x.week_gnss, _x.seconds, _x.lat, _x.lon, _x.height, _x.north_velocity, _x.east_velocity, _x.up_velocity, _x.roll, _x.pitch, _x.azimuth,) = _get_struct_I10d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I10d().pack(_x.week_gnss, _x.seconds, _x.lat, _x.lon, _x.height, _x.north_velocity, _x.east_velocity, _x.up_velocity, _x.roll, _x.pitch, _x.azimuth))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 84
      (_x.week_gnss, _x.seconds, _x.lat, _x.lon, _x.height, _x.north_velocity, _x.east_velocity, _x.up_velocity, _x.roll, _x.pitch, _x.azimuth,) = _get_struct_I10d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_I10d = None
def _get_struct_I10d():
    global _struct_I10d
    if _struct_I10d is None:
        _struct_I10d = struct.Struct("<I10d")
    return _struct_I10d
