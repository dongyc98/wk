# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gps_msg/Gps_GGA.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Gps_GGA(genpy.Message):
  _md5sum = "5e3d6806e31e5486a0581e347bc3ff13"
  _type = "gps_msg/Gps_GGA"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

string pos_status   # 位置状态 A=有效，V=无效  我自己添加
# GAGGA 数据包msg
float64 utc         # hhmmss.ss
float64 lat         # 经度
string  lat_dir
float64 lon         # 纬度
string  lon_dir
uint8   qual        # GPS质量指示符  0=定位不可用  1=单点定位  2=伪距差分或SBAS定位，4=RTK固定解，5=RTK浮点解，6=惯导定位
uint8   sats        # 使用中的卫星数，可能与所见数不一致
float32 hdop        # 水平精度因子
float64 alt         # 天线海拔高度，低于大地水准面为负值
string  a_units     # 天线高度单位
float32 undulation  # 大地水准面差距-大地水准面和WGS84椭球面之间的距离，大地水准面高于椭球面为正值，否则为负
string  u_units     # 大地水准面差距单位
string  age         # 差分数据龄期，秒为单位（没有差分数据时为空）
int64   stn_ID      # 差分基站ID，0000-4096 （没有差分数据时为空）
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','pos_status','utc','lat','lat_dir','lon','lon_dir','qual','sats','hdop','alt','a_units','undulation','u_units','age','stn_ID']
  _slot_types = ['std_msgs/Header','string','float64','float64','string','float64','string','uint8','uint8','float32','float64','string','float32','string','string','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,pos_status,utc,lat,lat_dir,lon,lon_dir,qual,sats,hdop,alt,a_units,undulation,u_units,age,stn_ID

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Gps_GGA, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pos_status is None:
        self.pos_status = ''
      if self.utc is None:
        self.utc = 0.
      if self.lat is None:
        self.lat = 0.
      if self.lat_dir is None:
        self.lat_dir = ''
      if self.lon is None:
        self.lon = 0.
      if self.lon_dir is None:
        self.lon_dir = ''
      if self.qual is None:
        self.qual = 0
      if self.sats is None:
        self.sats = 0
      if self.hdop is None:
        self.hdop = 0.
      if self.alt is None:
        self.alt = 0.
      if self.a_units is None:
        self.a_units = ''
      if self.undulation is None:
        self.undulation = 0.
      if self.u_units is None:
        self.u_units = ''
      if self.age is None:
        self.age = ''
      if self.stn_ID is None:
        self.stn_ID = 0
    else:
      self.header = std_msgs.msg.Header()
      self.pos_status = ''
      self.utc = 0.
      self.lat = 0.
      self.lat_dir = ''
      self.lon = 0.
      self.lon_dir = ''
      self.qual = 0
      self.sats = 0
      self.hdop = 0.
      self.alt = 0.
      self.a_units = ''
      self.undulation = 0.
      self.u_units = ''
      self.age = ''
      self.stn_ID = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.pos_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2d().pack(_x.utc, _x.lat))
      _x = self.lat_dir
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lon
      buff.write(_get_struct_d().pack(_x))
      _x = self.lon_dir
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Bfd().pack(_x.qual, _x.sats, _x.hdop, _x.alt))
      _x = self.a_units
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.undulation
      buff.write(_get_struct_f().pack(_x))
      _x = self.u_units
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.age
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.stn_ID
      buff.write(_get_struct_q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pos_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pos_status = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.utc, _x.lat,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lat_dir = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lat_dir = str[start:end]
      start = end
      end += 8
      (self.lon,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lon_dir = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lon_dir = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.qual, _x.sats, _x.hdop, _x.alt,) = _get_struct_2Bfd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.a_units = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.a_units = str[start:end]
      start = end
      end += 4
      (self.undulation,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.u_units = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.u_units = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.age = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.age = str[start:end]
      start = end
      end += 8
      (self.stn_ID,) = _get_struct_q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.pos_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2d().pack(_x.utc, _x.lat))
      _x = self.lat_dir
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lon
      buff.write(_get_struct_d().pack(_x))
      _x = self.lon_dir
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Bfd().pack(_x.qual, _x.sats, _x.hdop, _x.alt))
      _x = self.a_units
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.undulation
      buff.write(_get_struct_f().pack(_x))
      _x = self.u_units
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.age
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.stn_ID
      buff.write(_get_struct_q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pos_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pos_status = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.utc, _x.lat,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lat_dir = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lat_dir = str[start:end]
      start = end
      end += 8
      (self.lon,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lon_dir = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lon_dir = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.qual, _x.sats, _x.hdop, _x.alt,) = _get_struct_2Bfd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.a_units = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.a_units = str[start:end]
      start = end
      end += 4
      (self.undulation,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.u_units = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.u_units = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.age = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.age = str[start:end]
      start = end
      end += 8
      (self.stn_ID,) = _get_struct_q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Bfd = None
def _get_struct_2Bfd():
    global _struct_2Bfd
    if _struct_2Bfd is None:
        _struct_2Bfd = struct.Struct("<2Bfd")
    return _struct_2Bfd
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
