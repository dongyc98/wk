# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gps_msg/Gps_RMC.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Gps_RMC(genpy.Message):
  _md5sum = "4ed0fb8addd3545d2ae5e27efc17db4b"
  _type = "gps_msg/Gps_RMC"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

# GNRMC 数据包msg
float64 utc         # hhmmss.ss
string pos_status   # 位置状态 A=有效，V=无效
float64 lat         # 纬度
string  lat_dir     # 纬度方向
float64 lon         # 经度
string  lon_dir     # 经度方向
float64 speed_Kn    # 地速 knot
float32 track_true  # 真北航迹方向,deg
int64  date         # 日期 ddmmyy 
float32 mag_var     # 磁偏角 deg
string var_dir      # 磁偏角方向 E/W
string mode_ind     # 定位模式指示器

# GNGSA 数据包msg   定位使用的卫星和DOP值（相对误差）
# float32 pdop        # 位置精度因子
# float32 hdop        # 平面精度因子
# float32 vdop        # 高程精度因子






================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','utc','pos_status','lat','lat_dir','lon','lon_dir','speed_Kn','track_true','date','mag_var','var_dir','mode_ind']
  _slot_types = ['std_msgs/Header','float64','string','float64','string','float64','string','float64','float32','int64','float32','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,utc,pos_status,lat,lat_dir,lon,lon_dir,speed_Kn,track_true,date,mag_var,var_dir,mode_ind

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Gps_RMC, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.utc is None:
        self.utc = 0.
      if self.pos_status is None:
        self.pos_status = ''
      if self.lat is None:
        self.lat = 0.
      if self.lat_dir is None:
        self.lat_dir = ''
      if self.lon is None:
        self.lon = 0.
      if self.lon_dir is None:
        self.lon_dir = ''
      if self.speed_Kn is None:
        self.speed_Kn = 0.
      if self.track_true is None:
        self.track_true = 0.
      if self.date is None:
        self.date = 0
      if self.mag_var is None:
        self.mag_var = 0.
      if self.var_dir is None:
        self.var_dir = ''
      if self.mode_ind is None:
        self.mode_ind = ''
    else:
      self.header = std_msgs.msg.Header()
      self.utc = 0.
      self.pos_status = ''
      self.lat = 0.
      self.lat_dir = ''
      self.lon = 0.
      self.lon_dir = ''
      self.speed_Kn = 0.
      self.track_true = 0.
      self.date = 0
      self.mag_var = 0.
      self.var_dir = ''
      self.mode_ind = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.utc
      buff.write(_get_struct_d().pack(_x))
      _x = self.pos_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lat
      buff.write(_get_struct_d().pack(_x))
      _x = self.lat_dir
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lon
      buff.write(_get_struct_d().pack(_x))
      _x = self.lon_dir
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_dfqf().pack(_x.speed_Kn, _x.track_true, _x.date, _x.mag_var))
      _x = self.var_dir
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.mode_ind
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 8
      (self.utc,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pos_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pos_status = str[start:end]
      start = end
      end += 8
      (self.lat,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lat_dir = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lat_dir = str[start:end]
      start = end
      end += 8
      (self.lon,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lon_dir = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lon_dir = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.speed_Kn, _x.track_true, _x.date, _x.mag_var,) = _get_struct_dfqf().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.var_dir = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.var_dir = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode_ind = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mode_ind = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.utc
      buff.write(_get_struct_d().pack(_x))
      _x = self.pos_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lat
      buff.write(_get_struct_d().pack(_x))
      _x = self.lat_dir
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lon
      buff.write(_get_struct_d().pack(_x))
      _x = self.lon_dir
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_dfqf().pack(_x.speed_Kn, _x.track_true, _x.date, _x.mag_var))
      _x = self.var_dir
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.mode_ind
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 8
      (self.utc,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pos_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pos_status = str[start:end]
      start = end
      end += 8
      (self.lat,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lat_dir = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lat_dir = str[start:end]
      start = end
      end += 8
      (self.lon,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lon_dir = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lon_dir = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.speed_Kn, _x.track_true, _x.date, _x.mag_var,) = _get_struct_dfqf().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.var_dir = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.var_dir = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode_ind = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mode_ind = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_dfqf = None
def _get_struct_dfqf():
    global _struct_dfqf
    if _struct_dfqf is None:
        _struct_dfqf = struct.Struct("<dfqf")
    return _struct_dfqf
